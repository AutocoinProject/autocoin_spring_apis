package com.autocoin.global.aop;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Timer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;
import org.springframework.util.StopWatch;

/**
 * ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ AOP
 * 
 * - API Î©îÏÑúÎìú Ïã§Ìñâ ÏãúÍ∞Ñ Ï∏°Ï†ï
 * - ÎäêÎ¶∞ Î©îÏÑúÎìú Í∞êÏßÄ Î∞è Î°úÍπÖ
 * - Prometheus Î©îÌä∏Î¶≠ ÏàòÏßë
 */
@Aspect
@Component
@RequiredArgsConstructor
@Slf4j
public class PerformanceMonitoringAspect {

    private final MeterRegistry meterRegistry;
    
    // ÏÑ±Îä• ÏûÑÍ≥ÑÍ∞í (Î∞ÄÎ¶¨Ï¥à)
    private static final long SLOW_METHOD_THRESHOLD = 1000L; // 1Ï¥à
    private static final long VERY_SLOW_METHOD_THRESHOLD = 3000L; // 3Ï¥à

    /**
     * Controller Î©îÏÑúÎìú ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ
     */
    @Around("execution(* com.autocoin.*.api.*Controller.*(..))")
    public Object monitorControllerPerformance(ProceedingJoinPoint joinPoint) throws Throwable {
        return monitorMethodPerformance(joinPoint, "controller");
    }

    /**
     * Service Î©îÏÑúÎìú ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ
     */
    @Around("execution(* com.autocoin.*.application.*Service.*(..))")
    public Object monitorServicePerformance(ProceedingJoinPoint joinPoint) throws Throwable {
        return monitorMethodPerformance(joinPoint, "service");
    }

    /**
     * Repository Î©îÏÑúÎìú ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ
     */
    @Around("execution(* com.autocoin.*.infrastructure.*Repository.*(..))")
    public Object monitorRepositoryPerformance(ProceedingJoinPoint joinPoint) throws Throwable {
        return monitorMethodPerformance(joinPoint, "repository");
    }

    /**
     * Ïô∏Î∂Ä API Ìò∏Ï∂ú ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ
     */
    @Around("execution(* com.autocoin.*.infrastructure.*Client.*(..))")
    public Object monitorExternalApiPerformance(ProceedingJoinPoint joinPoint) throws Throwable {
        return monitorMethodPerformance(joinPoint, "external-api");
    }

    /**
     * Í≥µÌÜµ ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Î°úÏßÅ
     */
    private Object monitorMethodPerformance(ProceedingJoinPoint joinPoint, String layer) throws Throwable {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();
        String fullMethodName = className + "." + methodName;
        
        // StopWatchÎ°ú Ïã§Ìñâ ÏãúÍ∞Ñ Ï∏°Ï†ï
        StopWatch stopWatch = new StopWatch();
        stopWatch.start();
        
        // Micrometer TimerÎ°ú Î©îÌä∏Î¶≠ ÏàòÏßë
        Timer.Sample sample = Timer.start(meterRegistry);
        
        Object result = null;
        Throwable exception = null;
        
        try {
            result = joinPoint.proceed();
            return result;
        } catch (Throwable e) {
            exception = e;
            throw e;
        } finally {
            stopWatch.stop();
            long executionTime = stopWatch.getTotalTimeMillis();
            
            // Micrometer Î©îÌä∏Î¶≠ Í∏∞Î°ù
            sample.stop(Timer.builder("method.execution.time")
                    .tag("class", className)
                    .tag("method", methodName)
                    .tag("layer", layer)
                    .tag("status", exception != null ? "error" : "success")
                    .register(meterRegistry));
            
            // Î°úÍπÖ Ï≤òÎ¶¨
            logPerformance(fullMethodName, executionTime, exception, layer);
            
            // ÏÑ±Îä• Ïπ¥Ïö¥ÌÑ∞ Ï¶ùÍ∞Ä
            incrementPerformanceCounters(layer, executionTime, exception != null);
        }
    }

    /**
     * ÏÑ±Îä• Î°úÍπÖ Ï≤òÎ¶¨
     */
    private void logPerformance(String methodName, long executionTime, Throwable exception, String layer) {
        if (exception != null) {
            // ÏóêÎü¨ Î∞úÏÉù Ïãú Ìï≠ÏÉÅ Î°úÍπÖ
            log.error("[{}] üö® {} Ïã§Ìñâ Ïã§Ìå® - {}ms, Error: {}", 
                    layer.toUpperCase(), methodName, executionTime, exception.getMessage());
        } else if (executionTime >= VERY_SLOW_METHOD_THRESHOLD) {
            // Îß§Ïö∞ ÎäêÎ¶∞ Î©îÏÑúÎìú (3Ï¥à Ïù¥ÏÉÅ)
            log.warn("[{}] üêå {} Îß§Ïö∞ ÎäêÎ¶∞ Ïã§Ìñâ - {}ms", 
                    layer.toUpperCase(), methodName, executionTime);
        } else if (executionTime >= SLOW_METHOD_THRESHOLD) {
            // ÎäêÎ¶∞ Î©îÏÑúÎìú (1Ï¥à Ïù¥ÏÉÅ)
            log.warn("[{}] ‚ö†Ô∏è {} ÎäêÎ¶∞ Ïã§Ìñâ - {}ms", 
                    layer.toUpperCase(), methodName, executionTime);
        } else {
            // Ï†ïÏÉÅ Ïã§Ìñâ (DEBUG Î†àÎ≤®)
            log.debug("[{}] ‚úÖ {} Ïã§Ìñâ ÏôÑÎ£å - {}ms", 
                    layer.toUpperCase(), methodName, executionTime);
        }
    }

    /**
     * ÏÑ±Îä• Ïπ¥Ïö¥ÌÑ∞ Ï¶ùÍ∞Ä
     */
    private void incrementPerformanceCounters(String layer, long executionTime, boolean hasError) {
        // Ï¥ù Ïã§Ìñâ ÌöüÏàò
        meterRegistry.counter("method.execution.count",
                "layer", layer,
                "status", hasError ? "error" : "success")
                .increment();
        
        // ÎäêÎ¶∞ Î©îÏÑúÎìú Ïπ¥Ïö¥ÌÑ∞
        if (executionTime >= SLOW_METHOD_THRESHOLD) {
            meterRegistry.counter("method.execution.slow",
                    "layer", layer,
                    "threshold", executionTime >= VERY_SLOW_METHOD_THRESHOLD ? "very_slow" : "slow")
                    .increment();
        }
        
        // ÏóêÎü¨ Ïπ¥Ïö¥ÌÑ∞
        if (hasError) {
            meterRegistry.counter("method.execution.error",
                    "layer", layer)
                    .increment();
        }
    }
}
