input {
  # Spring Boot 애플리케이션 로그 파일 입력
  file {
    path => "/var/log/autocoin/*.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
      max_lines => 500
      max_bytes => "10MB"
    }
    tags => ["autocoin-app", "file-input"]
  }
  
  # Docker 컨테이너 로그 (Filebeat 통해 입력)
  beats {
    port => 5044
    type => "logs"
  }
  
  # TCP 입력 (실시간 로그 스트리밍용)
  tcp {
    port => 5000
    codec => json_lines
    tags => ["tcp-input"]
  }
  
  # Nginx 액세스 로그
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/nginx-sincedb"
    tags => ["nginx", "access-log"]
  }
  
  # Nginx 에러 로그
  file {
    path => "/var/log/nginx/error.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/nginx-error-sincedb"
    tags => ["nginx", "error-log"]
  }
}

filter {
  # ===== Spring Boot 애플리케이션 로그 처리 =====
  if "autocoin-app" in [tags] {
    # 기본 Spring Boot 로그 패턴 파싱
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:thread}\]\s+(?:\[%{DATA:trace_id}\]\s+)?%{LOGLEVEL:level}\s+%{DATA:logger}\s+-\s+%{GREEDYDATA:log_message}"
      }
      tag_on_failure => ["_grokparsefailure_spring_basic"]
    }
    
    # 대체 패턴 (트레이스 ID가 없는 경우)
    if "_grokparsefailure_spring_basic" in [tags] {
      grok {
        match => { 
          "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+\[%{DATA:thread}\]\s+%{LOGLEVEL:level}\s+%{DATA:logger}\s+-\s+%{GREEDYDATA:log_message}"
        }
        tag_on_failure => ["_grokparsefailure_spring_alt"]
      }
    }
    
    # 타임스탬프 파싱
    if [timestamp] {
      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss,SSS" ]
        target => "@timestamp"
      }
    }
    
    # 로그 레벨별 메타데이터 추가
    if [level] == "ERROR" {
      mutate {
        add_field => { 
          "severity" => "high"
          "alert_type" => "error"
          "priority" => "1"
        }
        add_tag => ["error-log"]
      }
    } else if [level] == "WARN" {
      mutate {
        add_field => { 
          "severity" => "medium"
          "alert_type" => "warning"
          "priority" => "2"
        }
        add_tag => ["warning-log"]
      }
    } else if [level] == "INFO" {
      mutate {
        add_field => { 
          "severity" => "low"
          "alert_type" => "info"
          "priority" => "3"
        }
        add_tag => ["info-log"]
      }
    } else if [level] == "DEBUG" {
      mutate {
        add_field => { 
          "severity" => "very_low"
          "alert_type" => "debug"
          "priority" => "4"
        }
        add_tag => ["debug-log"]
      }
    }
    
    # ===== 에러 패턴 감지 및 분류 =====
    if [log_message] {
      # SQL 관련 에러
      if [log_message] =~ /SQLException|DatabaseException|Connection.*failed|Deadlock/ {
        mutate {
          add_field => { 
            "error_category" => "database"
            "requires_attention" => "true"
          }
          add_tag => ["database-error"]
        }
      }
      
      # HTTP/API 관련 에러
      else if [log_message] =~ /HttpException|RestClientException|Connection.*timeout|HTTP.*error/ {
        mutate {
          add_field => { 
            "error_category" => "external_api"
            "requires_attention" => "true"
          }
          add_tag => ["api-error"]
        }
      }
      
      # 메모리 관련 에러
      else if [log_message] =~ /OutOfMemoryError|MemoryError|Heap.*space/ {
        mutate {
          add_field => { 
            "error_category" => "memory"
            "requires_attention" => "critical"
          }
          add_tag => ["memory-error", "critical-error"]
        }
      }
      
      # 보안 관련 에러
      else if [log_message] =~ /SecurityException|AuthenticationException|Unauthorized|Access.*denied/ {
        mutate {
          add_field => { 
            "error_category" => "security"
            "requires_attention" => "true"
          }
          add_tag => ["security-error"]
        }
      }
      
      # 일반 예외
      else if [log_message] =~ /Exception|Error|Failed|NullPointerException/ {
        mutate {
          add_field => { 
            "error_category" => "application"
            "error_detected" => "true"
          }
          add_tag => ["application-error"]
        }
      }
      
      # 스택트레이스 감지
      if [log_message] =~ /at\s+[\w\.$]+\([\w\.]+:\d+\)/ {
        mutate {
          add_field => { "has_stacktrace" => "true" }
          add_tag => ["stacktrace"]
        }
      }
    }
    
    # ===== 서비스 컴포넌트 식별 =====
    if [logger] {
      # 컨트롤러 로그
      if [logger] =~ /controller/ {
        mutate { add_field => { "service_component" => "controller" } }
      }
      # 서비스 로그
      else if [logger] =~ /service/ {
        mutate { add_field => { "service_component" => "service" } }
      }
      # 리포지토리/DAO 로그
      else if [logger] =~ /repository|dao/ {
        mutate { add_field => { "service_component" => "repository" } }
      }
      # 업비트 API 관련
      else if [logger] =~ /upbit/ {
        mutate { add_field => { "service_component" => "upbit" } }
      }
      # 인증/보안 관련
      else if [logger] =~ /auth|security|jwt/ {
        mutate { add_field => { "service_component" => "auth" } }
      }
      # 뉴스 수집 관련
      else if [logger] =~ /news|crawler/ {
        mutate { add_field => { "service_component" => "news" } }
      }
    }
    
    # ===== HTTP API 요청 로그 파싱 =====
    if [log_message] =~ /(GET|POST|PUT|DELETE|PATCH)\s+\/.*HTTP/ {
      grok {
        match => { 
          "log_message" => "%{WORD:http_method}\s+%{URIPATH:endpoint}(?:%{URIPARAM:params})?\s+HTTP/%{NUMBER:http_version}\s+-\s+%{NUMBER:http_status}\s+-\s+%{NUMBER:duration}ms(?:\s+-\s+IP:\s+%{IP:client_ip})?"
        }
        tag_on_failure => ["_api_parse_failure"]
      }
      
      if ![_api_parse_failure] {
        mutate {
          add_field => { "log_type" => "api_request" }
          convert => { 
            "http_status" => "integer"
            "duration" => "integer"
            "http_version" => "float"
          }
          add_tag => ["api-request"]
        }
        
        # 느린 응답 감지 (1초 이상)
        if [duration] and [duration] > 1000 {
          mutate {
            add_field => { 
              "slow_request" => "true"
              "performance_issue" => "true"
            }
            add_tag => ["slow-response"]
          }
        }
        
        # 매우 느린 응답 (5초 이상)
        if [duration] and [duration] > 5000 {
          mutate {
            add_field => { "critical_slow_request" => "true" }
            add_tag => ["critical-slow-response"]
          }
        }
        
        # HTTP 에러 상태 분류
        if [http_status] {
          if [http_status] >= 500 {
            mutate {
              add_field => { 
                "http_error_type" => "server_error"
                "requires_attention" => "true"
              }
              add_tag => ["http-5xx"]
            }
          } else if [http_status] >= 400 {
            mutate {
              add_field => { "http_error_type" => "client_error" }
              add_tag => ["http-4xx"]
            }
          } else if [http_status] >= 200 and [http_status] < 300 {
            mutate {
              add_field => { "http_success" => "true" }
              add_tag => ["http-success"]
            }
          }
        }
      }
    }
    
    # ===== 사용자 활동 로그 파싱 =====
    if [log_message] =~ /(Login|Logout|Register|Failed.*authentication)/ {
      mutate {
        add_field => { "log_type" => "user_activity" }
        add_tag => ["user-activity"]
      }
      
      # 로그인 시도 파싱
      if [log_message] =~ /Login\s+attempt.*user:\s*(\w+)/ {
        grok {
          match => { "log_message" => "Login\s+attempt.*user:\s*%{WORD:username}.*IP:\s*%{IP:login_ip}" }
        }
        mutate { add_tag => ["login-attempt"] }
      }
      
      # 로그인 실패 감지
      if [log_message] =~ /(Failed|Invalid).*authentication/ {
        mutate {
          add_field => { 
            "security_event" => "authentication_failure"
            "requires_attention" => "true"
          }
          add_tag => ["auth-failure", "security-event"]
        }
      }
    }
    
    # ===== 비즈니스 메트릭 추출 =====
    # 사용자 등록
    if [log_message] =~ /User.*registered.*ID:\s*(\d+)/ {
      grok {
        match => { "log_message" => "User.*registered.*ID:\s*%{NUMBER:user_id}" }
      }
      mutate {
        add_field => { 
          "business_event" => "user_registration"
          "metric_type" => "user_growth"
        }
        add_tag => ["business-metric", "user-registration"]
      }
    }
    
    # 거래 활동
    if [log_message] =~ /(Trade|Order).*executed/ {
      mutate {
        add_field => { 
          "business_event" => "trade_activity"
          "metric_type" => "trading"
        }
        add_tag => ["business-metric", "trading"]
      }
    }
  }
  
  # ===== Nginx 로그 처리 =====
  if "nginx" in [tags] {
    if "access-log" in [tags] {
      grok {
        match => { 
          "message" => "%{NGINXACCESS}"
        }
        patterns_dir => ["/usr/share/logstash/patterns"]
      }
      
      if [response] {
        mutate {
          convert => { "response" => "integer" }
        }
      }
      
      mutate {
        add_field => { "log_type" => "nginx_access" }
        add_tag => ["nginx-access"]
      }
    } 
    
    if "error-log" in [tags] {
      mutate {
        add_field => { "log_type" => "nginx_error" }
        add_tag => ["nginx-error"]
      }
    }
  }
  
  # ===== 공통 필드 추가 =====
  mutate {
    add_field => { 
      "application" => "autocoin-api"
      "environment" => "${ENVIRONMENT:production}"
      "version" => "${APP_VERSION:1.0.0}"
      "processed_at" => "%{@timestamp}"
    }
  }
  
  # ===== 지리적 정보 추가 (클라이언트 IP 기반) =====
  if [client_ip] and [client_ip] != "127.0.0.1" and [client_ip] !~ /^10\./ and [client_ip] !~ /^192\.168\./ {
    geoip {
      source => "client_ip"
      target => "geoip"
      add_tag => ["geoip"]
    }
  }
  
  # ===== 불필요한 필드 정리 =====
  mutate {
    remove_field => [ "host", "path", "input", "agent" ]
    remove_tag => ["_grokparsefailure_spring_basic", "_grokparsefailure_spring_alt"]
  }
  
  # ===== 민감 정보 마스킹 =====
  if [log_message] {
    # 비밀번호 마스킹
    mutate {
      gsub => [ 
        "log_message", "password['\"]?\s*[:=]\s*['\"]?[^'\",\s]+", "password=***MASKED***",
        "log_message", "token['\"]?\s*[:=]\s*['\"]?[^'\",\s]+", "token=***MASKED***",
        "log_message", "secret['\"]?\s*[:=]\s*['\"]?[^'\",\s]+", "secret=***MASKED***"
      ]
    }
  }
}

output {
  # ===== Elasticsearch 메인 출력 =====
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "autocoin-logs-%{+YYYY.MM.dd}"
    template_overwrite => true
    template => "/usr/share/logstash/templates/autocoin-template.json"
    template_name => "autocoin"
    document_type => "_doc"
    
    # 문서 ID 생성 (중복 방지)
    document_id => "%{[@metadata][fingerprint]}"
  }
  
  # ===== 에러 로그 별도 인덱스 =====
  if [level] == "ERROR" or "error-log" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "autocoin-errors-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # ===== 보안 이벤트 별도 인덱스 =====
  if "security-event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "autocoin-security-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # ===== 비즈니스 메트릭 별도 인덱스 =====
  if "business-metric" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "autocoin-metrics-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # ===== 성능 문제 별도 인덱스 =====
  if "slow-response" in [tags] or "critical-slow-response" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "autocoin-performance-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # ===== 개발/테스트 환경 콘솔 출력 =====
  if "${ENVIRONMENT:production}" != "production" {
    stdout { 
      codec => rubydebug {
        metadata => false
      }
    }
  }
  
  # ===== Critical 에러 즉시 알림 (Webhook) =====
  if "critical-error" in [tags] or [requires_attention] == "critical" {
    http {
      url => "${SLACK_WEBHOOK_URL}"
      http_method => "post"
      content_type => "application/json"
      format => "json"
      mapping => {
        "text" => "🚨 Critical Error Detected in Autocoin API: %{log_message}"
        "channel" => "#critical-alerts"
        "username" => "LogstashBot"
      }
    }
  }
}
