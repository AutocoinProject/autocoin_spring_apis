name: 🔄 Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to rollback to (e.g., v1.2.3, latest-stable, previous)'
        required: true
        type: string
        default: 'previous'
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      confirm:
        description: 'Type "CONFIRM" to proceed with rollback'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/autocoin-api

permissions:
  contents: read
  packages: read

jobs:
  validate-rollback:
    name: 🔍 Validate Rollback Request
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      target-version: ${{ steps.version.outputs.target }}
      rollback-approved: ${{ steps.validate.outputs.approved }}
    
    steps:
      - name: Validate confirmation
        id: validate
        run: |
          if [ "${{ inputs.confirm }}" != "CONFIRM" ]; then
            echo "❌ Rollback not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi
          
          if [ -z "${{ inputs.reason }}" ]; then
            echo "❌ Rollback reason is required."
            exit 1
          fi
          
          echo "✅ Rollback request validated"
          echo "approved=true" >> $GITHUB_OUTPUT

      - name: Determine target version
        id: version
        run: |
          TARGET_VERSION="${{ inputs.version }}"
          
          case "$TARGET_VERSION" in
            "previous")
              echo "🔍 Finding previous stable version..."
              TARGET_VERSION="latest-stable"
              ;;
            "latest-stable")
              TARGET_VERSION="latest-stable"
              ;;
            *)
              if [[ ! "$TARGET_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "⚠️ Custom version format detected: $TARGET_VERSION"
              fi
              ;;
          esac
          
          echo "🎯 Target version: $TARGET_VERSION"
          echo "target=$TARGET_VERSION" >> $GITHUB_OUTPUT

      - name: Log rollback request
        run: |
          echo "📋 Rollback Request Summary:"
          echo "  Environment: ${{ inputs.environment }}"
          echo "  Target Version: ${{ steps.version.outputs.target }}"
          echo "  Reason: ${{ inputs.reason }}"
          echo "  Requested by: ${{ github.actor }}"
          echo "  Request time: $(date -u)"

  pre-rollback-backup:
    name: 💾 Pre-Rollback Backup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-rollback]
    if: needs.validate-rollback.outputs.rollback-approved == 'true'
    
    steps:
      - name: Create current state backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.environment == 'production' && secrets.EC2_HOST || secrets.STAGING_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            echo "💾 Creating pre-rollback backup..."
            
            BACKUP_DIR="/opt/autocoin/rollback-backups"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_NAME="pre-rollback-${TIMESTAMP}"
            
            mkdir -p $BACKUP_DIR
            
            # 현재 실행 중인 컨테이너 정보 백업
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" > $BACKUP_DIR/${BACKUP_NAME}_containers.txt
            
            # 현재 이미지 태그 백업
            docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep autocoin > $BACKUP_DIR/${BACKUP_NAME}_images.txt
            
            # 환경 변수 백업
            if [ -f "/opt/autocoin/.env.prod" ]; then
              cp /opt/autocoin/.env.prod $BACKUP_DIR/${BACKUP_NAME}_env.backup
            fi
            
            echo "✅ Backup completed: $BACKUP_NAME"

  rollback-production:
    name: 🔄 Rollback Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-rollback, pre-rollback-backup]
    if: inputs.environment == 'production'
    environment:
      name: production-rollback
      url: https://api.autocoin.com
    
    steps:
      - name: Execute production rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            echo "🔄 Starting production rollback..."
            
            TARGET_VERSION="${{ needs.validate-rollback.outputs.target-version }}"
            IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TARGET_VERSION"
            CONTAINER_NAME="autocoin-api-prod"
            
            echo "Rolling back to: $IMAGE_NAME"
            
            # GitHub Container Registry 로그인
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull target image
            echo "📦 Pulling target image..."
            docker pull $IMAGE_NAME
            
            # Create additional backup of current container
            echo "💾 Creating additional backup..."
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            docker commit $CONTAINER_NAME autocoin-api-backup:$TIMESTAMP || true
            
            # Stop current container gracefully
            echo "🛑 Stopping current container gracefully..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            
            # Start with target version
            echo "🚀 Starting with target version..."
            cd /opt/autocoin
            
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p 8080:8080 \
              --env-file .env.prod \
              -v /opt/autocoin/logs:/app/logs \
              $IMAGE_NAME
            
            # Extended health check for production
            echo "⏳ Waiting for application to start..."
            RETRY_COUNT=0
            MAX_RETRIES=60
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if curl -sf http://localhost:8080/actuator/health > /dev/null; then
                echo "✅ Production rollback completed successfully!"
                break
              fi
              
              echo "Waiting for application... ($((RETRY_COUNT + 1))/$MAX_RETRIES)"
              sleep 5
              RETRY_COUNT=$((RETRY_COUNT + 1))
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "❌ Application failed to start after rollback"
              docker logs $CONTAINER_NAME --tail 50
              exit 1
            fi
            
            # Verify rollback
            echo "📋 Rollback verification:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" | grep $CONTAINER_NAME

  rollback-staging:
    name: 🔄 Rollback Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-rollback, pre-rollback-backup]
    if: inputs.environment == 'staging'
    environment:
      name: staging-rollback
      url: https://api-staging.autocoin.com
    
    steps:
      - name: Execute staging rollback
        run: |
          echo "🔄 Staging rollback simulation..."
          echo "Target version: ${{ needs.validate-rollback.outputs.target-version }}"
          echo "✅ Staging rollback would be executed here"

  post-rollback-verification:
    name: ✅ Post-Rollback Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [rollback-staging, rollback-production]
    if: always() && (needs.rollback-staging.result == 'success' || needs.rollback-production.result == 'success')
    
    steps:
      - name: Verify rollback success
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          TARGET_VERSION="${{ needs.validate-rollback.outputs.target-version }}"
          
          echo "🔍 Verifying rollback to $TARGET_VERSION on $ENVIRONMENT"
          echo "✅ Rollback verification completed"

  notify-rollback:
    name: 📢 Rollback Notification
    runs-on: ubuntu-latest
    needs: [validate-rollback, rollback-staging, rollback-production, post-rollback-verification]
    if: always()
    
    steps:
      - name: Determine rollback result
        id: result
        run: |
          if [ "${{ needs.rollback-staging.result }}" = "success" ] || [ "${{ needs.rollback-production.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack - Success
        if: steps.result.outputs.status == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#critical-alerts'
          text: |
            🔄 *긴급 롤백 완료*
            
            • **Environment**: ${{ inputs.environment }}
            • **Target Version**: ${{ needs.validate-rollback.outputs.target-version }}
            • **Reason**: ${{ inputs.reason }}
            • **Executed by**: ${{ github.actor }}
            
            ✅ **Status**: 롤백 성공
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Failure
        if: steps.result.outputs.status == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#critical-alerts'
          text: |
            🚨 *긴급 롤백 실패*
            
            • **Environment**: ${{ inputs.environment }}
            • **Target Version**: ${{ needs.validate-rollback.outputs.target-version }}
            • **Reason**: ${{ inputs.reason }}
            • **Executed by**: ${{ github.actor }}
            
            ❌ **Status**: 롤백 실패
            ⚠️ **즉시 수동 개입 필요!**
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
