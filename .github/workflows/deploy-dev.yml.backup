name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Create .env file for testing
      run: |
        cat > .env << EOF
        # Test environment settings (using PROD secrets for consistency)
        SPRING_PROFILES_ACTIVE=test
        API_PORT=8080
        
        # Test database (H2)
        DB_URL=jdbc:h2:mem:testdb
        DB_USERNAME=sa
        DB_PASSWORD=
        DDL_AUTO=create-drop
        
        # Use PROD secrets for validation
        JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID_PROD }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET_PROD }}
        KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID_PROD }}
        KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET_PROD }}
        AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_PROD }}
        AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY_PROD }}
        UPBIT_ENCRYPTION_KEY=${{ secrets.UPBIT_ENCRYPTION_KEY_PROD }}
        SERP_API_KEY=${{ secrets.SERP_API_KEY_PROD }}
        SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PROD }}
        SENTRY_DSN=${{ secrets.SENTRY_DSN_PROD }}
        
        # Disable features for testing
        OAUTH2_ENABLED=false
        SWAGGER_ENABLED=false
        APP_INIT_ENABLED=false
        SLACK_NOTIFICATIONS_ENABLED=false
        EOF
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Build with Gradle
      run: ./gradlew build
      
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create production .env file
      run: |
        cat > .env << EOF
        # Production Environment
        SPRING_PROFILES_ACTIVE=prod
        API_PORT=8080
        SERVER_ADDRESS=0.0.0.0
        APP_INIT_ENABLED=true
        
        # Database (Production) - using GitHub Secrets
        DB_URL=${{ secrets.DB_URL_PROD }}
        DB_HOST=${{ secrets.DB_HOST_PROD }}
        DB_USERNAME=${{ secrets.DB_USERNAME_PROD }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD_PROD }}
        DDL_AUTO=validate
        
        # Security
        JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}
        
        # OAuth2
        OAUTH2_ENABLED=true
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID_PROD }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET_PROD }}
        KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID_PROD }}
        KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET_PROD }}
        
        # AWS
        AWS_S3_BUCKET=autocoin-storage
        AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_PROD }}
        AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY_PROD }}
        AWS_REGION=ap-northeast-2
        
        # External APIs
        UPBIT_ENCRYPTION_KEY=${{ secrets.UPBIT_ENCRYPTION_KEY_PROD }}
        SERP_API_KEY=${{ secrets.SERP_API_KEY_PROD }}
        
        # Monitoring
        SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PROD }}
        SLACK_NOTIFICATIONS_ENABLED=true
        SENTRY_DSN=${{ secrets.SENTRY_DSN_PROD }}
        SENTRY_ENVIRONMENT=production
        
        # Production settings
        SWAGGER_ENABLED=false
        LOG_LEVEL_ROOT=WARN
        EOF
    
    - name: Deploy to Production
      run: |
        echo "🚀 Deploying to Production Server"
        # 실제 배포 스크립트 실행 - docker 폴더 사용
        # docker build -f docker/Dockerfile -t autocoin-api .
        # docker-compose -f docker/docker-compose.prod.yml up -d
