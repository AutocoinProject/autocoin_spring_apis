name: üîç PR Quality Checks

on:
  pull_request:
    branches: [main, develop]
  pull_request_review:
    types: [submitted]

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'corretto'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # PR Ï†ïÎ≥¥ ÏàòÏßë
  pr-info:
    name: üìã PR Information
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ github.event.pull_request.number }}
      pr-title: ${{ github.event.pull_request.title }}
      pr-author: ${{ github.event.pull_request.user.login }}
      base-branch: ${{ github.event.pull_request.base.ref }}
      head-branch: ${{ github.event.pull_request.head.ref }}
      changed-files: ${{ steps.changes.outputs.files }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changes
        run: |
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Îπ†Î•∏ Í≤ÄÏ¶ù (Î≥ëÎ†¨ Ïã§Ìñâ)
  quick-checks:
    name: ‚ö° Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PR title format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?:\ .+ ]]; then
            echo "‚ùå PR title does not follow conventional commits format"
            echo "Expected format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, test, chore"
            exit 1
          fi
          echo "‚úÖ PR title format is valid"

      - name: Check branch naming
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|release)\/[a-z0-9-]+$ ]]; then
            echo "‚ö†Ô∏è Branch name does not follow naming convention"
            echo "Expected format: type/description (kebab-case)"
            echo "Types: feature, bugfix, hotfix, release"
          else
            echo "‚úÖ Branch name format is valid"
          fi

  # ÏΩîÎìú ÌíàÏßà Í≤ÄÏÇ¨
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [pr-info]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run code quality checks
        run: |
          echo "Running code quality checks for PR..."
          # ./gradlew checkstyleMain checkstyleTest || echo "Checkstyle not configured"
          # ./gradlew spotbugsMain || echo "SpotBugs not configured"
          echo "‚úÖ Code quality checks completed"

  # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
  tests:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [pr-info]
    if: contains(needs.pr-info.outputs.changed-files, '.java') || contains(needs.pr-info.outputs.changed-files, '.gradle')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Generate test report
        if: always()
        run: ./gradlew jacocoTestReport

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-test-results
          path: |
            build/reports/tests/
            build/reports/jacoco/

      - name: Comment test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: build/test-results/test/*.xml
          reporter: java-junit

  # ÎπåÎìú ÌôïÏù∏
  build-check:
    name: üèóÔ∏è Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [tests]
    if: always() && (needs.tests.result == 'success' || needs.tests.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: ./gradlew build -x test

      - name: Check JAR file
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-plain.jar")
          if [ -f "$JAR_FILE" ]; then
            echo "‚úÖ JAR file created successfully: $JAR_FILE"
            echo "Size: $(du -h $JAR_FILE | cut -f1)"
          else
            echo "‚ùå JAR file not found"
            exit 1
          fi

  # Docker ÎπåÎìú ÌôïÏù∏
  docker-check:
    name: üê≥ Docker Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-check, pr-info]
    if: contains(needs.pr-info.outputs.changed-files, 'Dockerfile') || contains(needs.pr-info.outputs.changed-files, 'docker/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: autocoin-api:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # PR ÏöîÏïΩ ÏÉùÏÑ±
  pr-summary:
    name: üìù PR Summary
    runs-on: ubuntu-latest
    needs: [quick-checks, code-quality, tests, build-check, docker-check]
    if: always()
    
    steps:
      - name: Generate PR summary
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.pull_request.number }}
            });

            const checkResults = {
              'Quick Checks': '${{ needs.quick-checks.result }}',
              'Code Quality': '${{ needs.code-quality.result }}',
              'Tests': '${{ needs.tests.result }}',
              'Build Check': '${{ needs.build-check.result }}',
              'Docker Check': '${{ needs.docker-check.result }}'
            };

            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ö†Ô∏è';
              }
            };

            let summary = `## üîç PR Quality Check Results\n\n`;
            summary += `**PR #${{ github.event.pull_request.number }}**: ${pr.title}\n`;
            summary += `**Author**: @${{ github.event.pull_request.user.login }}\n`;
            summary += `**Branch**: \`${{ github.event.pull_request.head.ref }}\` ‚Üí \`${{ github.event.pull_request.base.ref }}\`\n\n`;
            
            summary += `### üìä Check Results\n\n`;
            Object.entries(checkResults).forEach(([check, result]) => {
              summary += `${getEmoji(result)} **${check}**: ${result}\n`;
            });

            summary += `\n### üìà Additional Information\n`;
            summary += `- **Changed files**: ${{ needs.pr-info.outputs.changed-files }}\n`;
            summary += `- **Workflow run**: [View details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;

            // PRÏóê ÏΩîÎ©òÌä∏ Ï∂îÍ∞Ä ÎòêÎäî ÏóÖÎç∞Ïù¥Ìä∏
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }}
            });

            const botComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Quality Check Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.pull_request.number }},
                body: summary
              });
            }
