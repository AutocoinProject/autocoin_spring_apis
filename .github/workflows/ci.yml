name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: autocoinproject/autocoin-api

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run tests
        run: ./gradlew test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to EC2 via Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 300s
          script: |
            # 배포 디렉토리 생성
            mkdir -p /home/ec2-user/autocoin-deployment
            mkdir -p /home/ec2-user/autocoin-logs
            mkdir -p /home/ec2-user/autocoin-temp
            cd /home/ec2-user/autocoin-deployment
            
            # docker-compose 파일 다운로드
            curl -o docker-compose.prod.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
            
            # .env 파일 생성
            cat > .env << EOF
            # Database
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PORT=${{ secrets.DB_PORT }}
            
            # Security
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            UPBIT_ENCRYPTION_KEY=${{ secrets.UPBIT_ENCRYPTION_KEY }}
            
            # AWS
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            
            # APIs
            SERP_API_KEY=${{ secrets.SERP_API_KEY }}
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            EOF
            
            # GitHub Container Registry 로그인
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 최신 이미지 pull
            docker pull ghcr.io/${{ env.IMAGE_NAME }}:latest
            
            # Docker Compose로 배포
            docker-compose -f docker-compose.prod.yml down || true
            docker-compose -f docker-compose.prod.yml up -d autocoin-api
            
            # 컨테이너 시작 대기
            echo "Waiting for application to start..."
            sleep 45
            
            # 헬스체크 (최대 3번 시도)
            for i in {1..3}; do
              echo "Health check attempt $i/3..."
              if curl -f http://localhost:8080/actuator/health; then
                echo "✅ Health check passed!"
                break
              elif [ $i -eq 3 ]; then
                echo "❌ Health check failed after 3 attempts"
                docker-compose -f docker-compose.prod.yml logs autocoin-api --tail 50
                exit 1
              else
                echo "Health check failed, retrying in 15 seconds..."
                sleep 15
              fi
            done
            
            # 컨테이너 상태 확인
            docker-compose -f docker-compose.prod.yml ps
            
            # 사용하지 않는 이미지 정리
            docker image prune -f
            
            echo "🚀 Deployment completed successfully!"
