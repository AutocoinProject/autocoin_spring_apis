name: CI/CD with SSM

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: autocoinproject/autocoin-api

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run tests
        run: ./gradlew test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to EC2 via SSM
        run: |
          # SSM을 통해 EC2에 배포 스크립트 실행
          aws ssm send-command \
            --instance-ids "i-09f9b0cd2b6a81741" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"Starting deployment...\"",
              "mkdir -p /home/ec2-user/autocoin-deployment",
              "mkdir -p /home/ec2-user/autocoin-logs", 
              "mkdir -p /home/ec2-user/autocoin-temp",
              "cd /home/ec2-user/autocoin-deployment",
              "curl -o docker-compose.prod.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml",
              "cat > .env << EOF",
              "DB_HOST=${{ secrets.DB_HOST }}",
              "DB_PASSWORD=${{ secrets.DB_PASSWORD }}",
              "DB_USERNAME=${{ secrets.DB_USERNAME }}",
              "DB_NAME=${{ secrets.DB_NAME }}",
              "DB_PORT=${{ secrets.DB_PORT }}",
              "JWT_SECRET=${{ secrets.JWT_SECRET }}",
              "UPBIT_ENCRYPTION_KEY=${{ secrets.UPBIT_ENCRYPTION_KEY }}",
              "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}",
              "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}",
              "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}",
              "SERP_API_KEY=${{ secrets.SERP_API_KEY }}",
              "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}",
              "SENTRY_DSN=${{ secrets.SENTRY_DSN }}",
              "EOF",
              "echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin",
              "docker pull ghcr.io/${{ env.IMAGE_NAME }}:latest",
              "docker-compose -f docker-compose.prod.yml down || true",
              "docker-compose -f docker-compose.prod.yml up -d autocoin-api",
              "sleep 45",
              "curl -f http://localhost:8080/actuator/health || exit 1",
              "docker image prune -f",
              "echo \"Deployment completed successfully!\""
            ]' \
            --output text \
            --query "Command.CommandId" > command_id.txt
          
          # 명령 실행 결과 대기 및 확인
          COMMAND_ID=$(cat command_id.txt)
          echo "Command ID: $COMMAND_ID"
          
          # 명령 완료까지 대기 (최대 10분)
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "i-09f9b0cd2b6a81741" \
              --query "Status" --output text)
            
            echo "Command status: $STATUS"
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment successful!"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "i-09f9b0cd2b6a81741" \
                --query "StandardOutputContent" --output text
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Deployment failed!"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "i-09f9b0cd2b6a81741" \
                --query "StandardErrorContent" --output text
              exit 1
            elif [ "$i" -eq 60 ]; then
              echo "⏰ Deployment timeout!"
              exit 1
            fi
            
            sleep 10
          done
