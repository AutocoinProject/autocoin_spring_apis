name: 🚀 Autocoin API CI/CD

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/autocoin-api
  JAVA_VERSION: '17'

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  # 테스트
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/reports/tests/

  # 빌드
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Build application
        run: ./gradlew build -x test --no-daemon

      - name: Get version
        id: version
        run: |
          VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 운영 환경 배포
  deploy-prod:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.autocoin.com
    
    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          timeout: 120s
          command_timeout: 20m
          script: |
            echo "🚀 Starting Autocoin API Production Deployment..."
            echo "📅 Time: $(date)"
            
            # 기존 컨테이너 정리
            sudo docker stop autocoin-api-prod || true
            sudo docker rm autocoin-api-prod || true
            
            # Docker 로그인
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 최신 이미지 pull
            IMAGE_TAG=$(echo "${{ needs.build.outputs.image }}" | head -n1)
            sudo docker pull $IMAGE_TAG
            
            # 환경변수 파일 생성 (Secrets 사용)
            cat > /tmp/.env.prod << 'EOF'
            # Database Configuration
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            # Security
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}
            
            # OAuth2
            OAUTH2_ENABLED=${{ secrets.OAUTH2_ENABLED }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            
            # AWS Services
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            
            # External APIs
            SERP_API_KEY=${{ secrets.SERP_API_KEY }}
            UPBIT_ENCRYPTION_KEY=${{ secrets.UPBIT_ENCRYPTION_KEY }}
            UPBIT_API_URL=${{ secrets.UPBIT_API_URL }}
            
            # Monitoring & Notifications
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            SLACK_NOTIFICATIONS_ENABLED=${{ secrets.SLACK_NOTIFICATIONS_ENABLED }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            SENTRY_ENVIRONMENT=${{ secrets.SENTRY_ENVIRONMENT }}
            
            # Application Settings
            SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            MANAGEMENT_ENDPOINTS=${{ secrets.MANAGEMENT_ENDPOINTS }}
            
            # Logging
            LOG_LEVEL_ROOT=${{ secrets.LOG_LEVEL_ROOT }}
            LOG_LEVEL_AUTOCOIN=${{ secrets.LOG_LEVEL_AUTOCOIN }}
            EOF
            
            # 로그 디렉토리 생성
            sudo mkdir -p /opt/autocoin/logs
            sudo chown -R ec2-user:ec2-user /opt/autocoin/logs
            
            # 새 컨테이너 시작
            sudo docker run -d \
              --name autocoin-api-prod \
              --restart unless-stopped \
              --memory="2g" \
              --cpus="1.0" \
              -p 8080:8080 \
              --env-file /tmp/.env.prod \
              -v /opt/autocoin/logs:/app/logs \
              $IMAGE_TAG
            
            # 헬스체크
            echo "⏳ Waiting for application to start..."
            sleep 30
            
            for i in {1..20}; do
              if curl -f -s http://localhost:8080/actuator/health; then
                echo "✅ Production deployment successful!"
                break
              fi
              echo "Waiting... ($i/20)"
              sleep 10
            done
            
            # 클린업
            rm -f /tmp/.env.prod
            
            # 상태 확인
            sudo docker ps | grep autocoin-api-prod
            sudo docker logs autocoin-api-prod --tail 10

  # 배포 알림
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-prod.result }}
          channel: '#deployments'
          text: |
            🚀 *Autocoin API 배포 결과*
            
            • **Branch**: `${{ github.ref_name }}`
            • **Commit**: `${{ github.sha }}`
            • **Author**: ${{ github.actor }}
            • **Status**: ${{ needs.deploy-prod.result == 'success' && '✅ Success' || '❌ Failed' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
