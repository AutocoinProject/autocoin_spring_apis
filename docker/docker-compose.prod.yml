version: '3.8'

services:
  # ====================================
  # Autocoin Spring API (Main Application)
  # ====================================
  autocoin-api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: autocoin-api-prod
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - API_PORT=8080
      - SERVER_ADDRESS=0.0.0.0
      
      # Database
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-autocoin}
      - DB_USERNAME=${DB_USERNAME:-autocoin}
      - DB_PASSWORD=${DB_PASSWORD}
      - DDL_AUTO=update
      - HIBERNATE_SHOW_SQL=false
      
      # JWT Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-3600000}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-86400000}
      
      # OAuth2
      - OAUTH2_ENABLED=${OAUTH2_ENABLED:-true}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      
      # AWS S3
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
      
      # Upbit
      - UPBIT_ENCRYPTION_KEY=${UPBIT_ENCRYPTION_KEY}
      - UPBIT_API_URL=https://api.upbit.com
      - UPBIT_RATE_LIMIT_ENABLED=true
      
      # External APIs
      - SERP_API_KEY=${SERP_API_KEY}
      - FLASK_API_URL=http://flask-api:5000
      
      # Monitoring
      - MANAGEMENT_ENDPOINTS=health,info,metrics,prometheus
      - MANAGEMENT_PROMETHEUS_ENABLED=true
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=production
      
      # Slack
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SLACK_NOTIFICATIONS_ENABLED=true
      
      # CORS
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://autocoin.com,https://www.autocoin.com}
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Logging
      - LOG_LEVEL_ROOT=WARN
      - LOG_LEVEL_AUTOCOIN=INFO
      
    volumes:
      - app-logs:/app/logs
      - ./monitoring/logstash:/var/log/autocoin:ro
    networks:
      - autocoin-network
      - monitoring
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ====================================
  # MySQL Database
  # ====================================
  mysql:
    image: mysql:8.0
    container_name: autocoin-mysql-prod
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME:-autocoin}
      - MYSQL_USER=${DB_USERNAME:-autocoin}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
      - ./sql/init:/docker-entrypoint-initdb.d:ro
    networks:
      - autocoin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    command: [
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--default-authentication-plugin=mysql_native_password',
      '--max_connections=200',
      '--innodb_buffer_pool_size=512M',
      '--slow_query_log=1',
      '--slow_query_log_file=/var/lib/mysql/slow.log',
      '--long_query_time=1'
    ]

  # ====================================
  # Redis Cache
  # ====================================
  redis:
    image: redis:7.0-alpine
    container_name: autocoin-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - autocoin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    command: redis-server /usr/local/etc/redis/redis.conf

  # ====================================
  # Nginx Reverse Proxy
  # ====================================
  nginx:
    image: nginx:1.24-alpine
    container_name: autocoin-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    networks:
      - autocoin-network
      - monitoring
    depends_on:
      - autocoin-api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # ====================================
  # Elasticsearch (Production)
  # ====================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: autocoin-elasticsearch-prod
    environment:
      - node.name=elasticsearch
      - cluster.name=autocoin-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - indices.query.bool.max_clause_count=10000
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.0'
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ====================================
  # Logstash (Production)
  # ====================================
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.3
    container_name: autocoin-logstash-prod
    environment:
      - LS_JAVA_OPTS=-Xmx2g -Xms1g
      - PIPELINE_WORKERS=4
      - PIPELINE_BATCH_SIZE=1000
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logstash/patterns:/usr/share/logstash/patterns:ro
      - app-logs:/var/log/autocoin:ro
    networks:
      - monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '0.75'

  # ====================================
  # Prometheus (Production)
  # ====================================
  prometheus:
    image: prom/prometheus:v2.40.7
    container_name: autocoin-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://monitoring.autocoin.com/prometheus'
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'

  # ====================================
  # Grafana (Production)
  # ====================================
  grafana:
    image: grafana/grafana:10.2.2
    container_name: autocoin-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=https://monitoring.autocoin.com
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_DATABASE_TYPE=mysql
      - GF_DATABASE_HOST=mysql:3306
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${DB_USERNAME:-autocoin}
      - GF_DATABASE_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    networks:
      - monitoring
      - autocoin-network
    depends_on:
      - prometheus
      - elasticsearch
      - mysql
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # ====================================
  # AlertManager (Production)
  # ====================================
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: autocoin-alertmanager-prod
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://monitoring.autocoin.com/alertmanager'
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  app-logs:
    driver: local

networks:
  autocoin-network:
    driver: bridge
  monitoring:
    driver: bridge
